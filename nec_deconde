#include "nec.h"
#include "sys.h"

/*k
函数功能：NEC协议的初始化
方    式：定时器与外部中断
硬件连接：REMODE_IN->PB9
*/
void NEC_Init(void)
{
	/*开启定时器TIM5*/
	RCC->APB1ENR|=1<<3;
	/*复位*/
	RCC->APB1RSTR|=1<<3;
	RCC->APB1RSTR&=~(1<<3);
	/*配置TIM5*/
	TIM5->CNT=0;//计数值
	TIM5->PSC=72-1;//预分频数
	TIM5->ARR=65535;//重装载值
	RCC->APB2ENR|=1<<3;//PB
	GPIOB->CRH&=0xFFFFFF0F;
	GPIOB->CRH|=0x00000080;//上下拉输入
	GPIOB->ODR|=1<<9;//上拉
	/*外部中断*/
	EXTI->IMR|=1<<9;//开放中断线9的中断请求
	EXTI->FTSR|=1<<9;//中断线9的下降沿
	RCC->APB2ENR|=1<<0;//AFTO时钟使能
	AFIO->EXTICR[2]&=~(0xF<<(1*4));//配置中断线PA9
	AFIO->EXTICR[2]|=0x1<<(1*4);//配置中断线PB9
	STM32_SetPriority(EXTI9_5_IRQn,1,1);
}

/*
函数功能：获取高电平的时间
返 回 值：返回值单位为 us
*/
u32 NEC_Get_TimeH(void)
{
	TIM5->CNT=0;
	TIM5->SR=0;
	TIM5->CR1|=1<<0;//开启定时器5
	while(NEC_IN){}
	TIM5->CR1&=~(1<<0);//关闭定时器5	
	return TIM5->CNT;//此时CNT的时间为高电平所经过的时间
}

/*
函数功能：获取低电平的时间
返 回 值：返回值单位为 us
*/
u32 NEC_Get_TimeL(void)
{
	TIM5->CNT=0;
	TIM5->SR=0;
	TIM5->CR1|=1<<0;//开启定时器5
	while(!NEC_IN){}
	TIM5->CR1&=~(1<<0);//关闭定时器5	
	return TIM5->CNT;
}	

u8 NEC_FLAG;//0代表没有接收到 1代表接收完成
u8 NEX_RX_BUFF[4];

void EXTI9_5_IRQHandler(void)//中断服务函数
{
	u32 time_us;
	u8 i,j;
	u8 data=0;
	if(EXTI->PR&1<<9)//判断由中断线9进入的中断
	{
		EXTI->PR|=1<<9;//清除挂起
		time_us=NEC_Get_TimeL();//获得引导码低电平的时间
		if(time_us<7000||time_us>11000) return;//不是低电平 9ms的时间，返回
		time_us=NEC_Get_TimeH();//获得引导码高电平的时间
		if(time_us<3000||time_us>6000) return;//不是高电平 4.5ms的时间，返回
		for(i=0;i<4;i++)
		{
			for(j=0;j<8;j++)
			{
				time_us=NEC_Get_TimeL();//获得用户码低的时间
				if(time_us<400||time_us>700)return;//560us低电平  560us高电平
				time_us=NEC_Get_TimeH();//获得用户码高的时间
				if(time_us>400&&time_us<700) data<<=1;//获得逻辑0
				else if(time_us>1400&&time_us<1900)//获得逻辑1
				{
					data<<=1;
					data++;
				}
				else return;//不符合条件就返回
			}
			NEX_RX_BUFF[i]=data;//数据赋给数组
		}
		NEC_FLAG=1;//代表结束
	}
}
